/* tslint:disable */
/* eslint-disable */
/**
 * HCP External API
 * External API for HCP application
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BooleanResponse
 */
export interface BooleanResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof BooleanResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BooleanResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BooleanResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof BooleanResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanResponse
     */
    'data'?: boolean;
}


/**
 * 
 * @export
 * @interface CertsBriefDto
 */
export interface CertsBriefDto {
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'certificationNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'certificationNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'issuingOrganizationAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'issuingOrganizationEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'dateIssued'?: string;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'expiryDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface CertsBriefDtoPagedList
 */
export interface CertsBriefDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof CertsBriefDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CertsBriefDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof CertsBriefDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CertsBriefDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CertsBriefDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CertsBriefDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<CertsBriefDto>}
     * @memberof CertsBriefDtoPagedList
     */
    'items'?: Array<CertsBriefDto> | null;
}
/**
 * 
 * @export
 * @interface CertsBriefDtoPagedListResponse
 */
export interface CertsBriefDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CertsBriefDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CertsBriefDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CertsBriefDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CertsBriefDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {CertsBriefDtoPagedList}
     * @memberof CertsBriefDtoPagedListResponse
     */
    'data'?: CertsBriefDtoPagedList;
}


/**
 * 
 * @export
 * @interface CertsBriefDtoResponse
 */
export interface CertsBriefDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CertsBriefDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CertsBriefDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CertsBriefDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CertsBriefDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CertsBriefDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {CertsBriefDto}
     * @memberof CertsBriefDtoResponse
     */
    'data'?: CertsBriefDto;
}


/**
 * 
 * @export
 * @interface CityDto
 */
export interface CityDto {
    /**
     * 
     * @type {string}
     * @memberof CityDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CityDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CityDto
     */
    'nameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CityDto
     */
    'countryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CityDto
     */
    'countryNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CityDto
     */
    'countryNameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface CityDtoPagedList
 */
export interface CityDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof CityDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CityDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof CityDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CityDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CityDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CityDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<CityDto>}
     * @memberof CityDtoPagedList
     */
    'items'?: Array<CityDto> | null;
}
/**
 * 
 * @export
 * @interface CityDtoPagedListResponse
 */
export interface CityDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CityDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CityDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CityDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CityDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CityDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {CityDtoPagedList}
     * @memberof CityDtoPagedListResponse
     */
    'data'?: CityDtoPagedList;
}


/**
 * 
 * @export
 * @interface CityDtoResponse
 */
export interface CityDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CityDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CityDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CityDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CityDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CityDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {CityDto}
     * @memberof CityDtoResponse
     */
    'data'?: CityDto;
}


/**
 * 
 * @export
 * @interface CountryDto
 */
export interface CountryDto {
    /**
     * 
     * @type {string}
     * @memberof CountryDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CountryDto
     */
    'nameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CountryDto
     */
    'code'?: string | null;
}
/**
 * 
 * @export
 * @interface CountryDtoListResponse
 */
export interface CountryDtoListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CountryDtoListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CountryDtoListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CountryDtoListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CountryDtoListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CountryDtoListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {Array<CountryDto>}
     * @memberof CountryDtoListResponse
     */
    'data'?: Array<CountryDto> | null;
}


/**
 * 
 * @export
 * @interface CountryDtoPagedList
 */
export interface CountryDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof CountryDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CountryDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CountryDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<CountryDto>}
     * @memberof CountryDtoPagedList
     */
    'items'?: Array<CountryDto> | null;
}
/**
 * 
 * @export
 * @interface CountryDtoPagedListResponse
 */
export interface CountryDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CountryDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CountryDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CountryDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CountryDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CountryDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {CountryDtoPagedList}
     * @memberof CountryDtoPagedListResponse
     */
    'data'?: CountryDtoPagedList;
}


/**
 * 
 * @export
 * @interface CountryDtoResponse
 */
export interface CountryDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof CountryDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof CountryDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CountryDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CountryDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof CountryDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {CountryDto}
     * @memberof CountryDtoResponse
     */
    'data'?: CountryDto;
}


/**
 * 
 * @export
 * @interface CreateCertsBriefDto
 */
export interface CreateCertsBriefDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'certificationNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'certificationNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'issuingOrganizationAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'issuingOrganizationEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'dateIssued'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'expiryDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCertsBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCityDto
 */
export interface CreateCityDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCityDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCityDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCityDto
     */
    'countryId': string;
}
/**
 * 
 * @export
 * @interface CreateCountryDto
 */
export interface CreateCountryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCountryDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCountryDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCountryDto
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface CreateEducationBriefDto
 */
export interface CreateEducationBriefDto {
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'institutionAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'institutionEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'degreeAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'degreeEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'notesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'notesEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEducationBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface CreateExperienceBriefDto
 */
export interface CreateExperienceBriefDto {
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'companyAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'companyEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'responsibilitiesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'responsibilitiesEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateExperienceBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface CreateJobTitleDto
 */
export interface CreateJobTitleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateJobTitleDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof CreateJobTitleDto
     */
    'nameEn': string;
}
/**
 * 
 * @export
 * @interface CreateNationalityDto
 */
export interface CreateNationalityDto {
    /**
     * 
     * @type {string}
     * @memberof CreateNationalityDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof CreateNationalityDto
     */
    'nameEn': string;
}
/**
 * 
 * @export
 * @interface CreatePersonalInfoDto
 */
export interface CreatePersonalInfoDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'fullNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'fullNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'nationalityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'idNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'passportNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'passportExpiry'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'gender'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'maritalStatusId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'cityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'mobile'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'summaryAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'summaryEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'preferencesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonalInfoDto
     */
    'preferencesEn'?: string | null;
    /**
     * 
     * @type {Array<CreateEducationBriefDto>}
     * @memberof CreatePersonalInfoDto
     */
    'educations'?: Array<CreateEducationBriefDto> | null;
    /**
     * 
     * @type {Array<CreateSkillsBriefDto>}
     * @memberof CreatePersonalInfoDto
     */
    'skills'?: Array<CreateSkillsBriefDto> | null;
    /**
     * 
     * @type {Array<CreateExperienceBriefDto>}
     * @memberof CreatePersonalInfoDto
     */
    'experiences'?: Array<CreateExperienceBriefDto> | null;
}
/**
 * 
 * @export
 * @interface CreateSkillsBriefDto
 */
export interface CreateSkillsBriefDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSkillsBriefDto
     */
    'skillNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSkillsBriefDto
     */
    'skillNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSkillsBriefDto
     */
    'proficiencyLevelAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSkillsBriefDto
     */
    'proficiencyLevelEn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateSkillsBriefDto
     */
    'yearsOfExperience'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSkillsBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface CreateSpecializationDto
 */
export interface CreateSpecializationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSpecializationDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSpecializationDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSpecializationDto
     */
    'jobTitleId': string;
}
/**
 * 
 * @export
 * @interface CreateSubSpecializationDto
 */
export interface CreateSubSpecializationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSubSpecializationDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSubSpecializationDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSubSpecializationDto
     */
    'specializationId': string;
}
/**
 * 
 * @export
 * @interface EducationBriefDto
 */
export interface EducationBriefDto {
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'institutionAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'institutionEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'degreeAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'degreeEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'notesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'notesEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface EducationBriefDtoPagedList
 */
export interface EducationBriefDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof EducationBriefDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof EducationBriefDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof EducationBriefDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof EducationBriefDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EducationBriefDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EducationBriefDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<EducationBriefDto>}
     * @memberof EducationBriefDtoPagedList
     */
    'items'?: Array<EducationBriefDto> | null;
}
/**
 * 
 * @export
 * @interface EducationBriefDtoPagedListResponse
 */
export interface EducationBriefDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof EducationBriefDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof EducationBriefDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof EducationBriefDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof EducationBriefDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {EducationBriefDtoPagedList}
     * @memberof EducationBriefDtoPagedListResponse
     */
    'data'?: EducationBriefDtoPagedList;
}


/**
 * 
 * @export
 * @interface EducationBriefDtoResponse
 */
export interface EducationBriefDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof EducationBriefDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof EducationBriefDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EducationBriefDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof EducationBriefDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof EducationBriefDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {EducationBriefDto}
     * @memberof EducationBriefDtoResponse
     */
    'data'?: EducationBriefDto;
}


/**
 * 
 * @export
 * @interface ExperienceBriefDto
 */
export interface ExperienceBriefDto {
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'companyAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'companyEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'jobTitleAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'jobTitleEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'responsibilitiesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'responsibilitiesEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface ExperienceBriefDtoPagedList
 */
export interface ExperienceBriefDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof ExperienceBriefDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperienceBriefDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperienceBriefDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperienceBriefDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ExperienceBriefDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExperienceBriefDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<ExperienceBriefDto>}
     * @memberof ExperienceBriefDtoPagedList
     */
    'items'?: Array<ExperienceBriefDto> | null;
}
/**
 * 
 * @export
 * @interface ExperienceBriefDtoPagedListResponse
 */
export interface ExperienceBriefDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof ExperienceBriefDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof ExperienceBriefDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExperienceBriefDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof ExperienceBriefDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {ExperienceBriefDtoPagedList}
     * @memberof ExperienceBriefDtoPagedListResponse
     */
    'data'?: ExperienceBriefDtoPagedList;
}


/**
 * 
 * @export
 * @interface ExperienceBriefDtoResponse
 */
export interface ExperienceBriefDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof ExperienceBriefDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof ExperienceBriefDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExperienceBriefDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExperienceBriefDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof ExperienceBriefDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {ExperienceBriefDto}
     * @memberof ExperienceBriefDtoResponse
     */
    'data'?: ExperienceBriefDto;
}


/**
 * 
 * @export
 * @interface GenderDto
 */
export interface GenderDto {
    /**
     * 
     * @type {string}
     * @memberof GenderDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenderDto
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenderDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenderDto
     */
    'nameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface GenderDtoPagedList
 */
export interface GenderDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof GenderDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof GenderDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof GenderDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof GenderDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GenderDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GenderDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<GenderDto>}
     * @memberof GenderDtoPagedList
     */
    'items'?: Array<GenderDto> | null;
}
/**
 * 
 * @export
 * @interface GenderDtoPagedListResponse
 */
export interface GenderDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof GenderDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof GenderDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GenderDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GenderDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof GenderDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {GenderDtoPagedList}
     * @memberof GenderDtoPagedListResponse
     */
    'data'?: GenderDtoPagedList;
}


/**
 * 
 * @export
 * @interface GuidResponse
 */
export interface GuidResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof GuidResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof GuidResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GuidResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GuidResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof GuidResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {string}
     * @memberof GuidResponse
     */
    'data'?: string;
}


/**
 * 
 * @export
 * @enum {number}
 */

export const HttpStatusCode = {
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_200: 200,
    NUMBER_201: 201,
    NUMBER_202: 202,
    NUMBER_203: 203,
    NUMBER_204: 204,
    NUMBER_205: 205,
    NUMBER_206: 206,
    NUMBER_207: 207,
    NUMBER_208: 208,
    NUMBER_226: 226,
    NUMBER_300: 300,
    NUMBER_301: 301,
    NUMBER_302: 302,
    NUMBER_303: 303,
    NUMBER_304: 304,
    NUMBER_305: 305,
    NUMBER_306: 306,
    NUMBER_307: 307,
    NUMBER_308: 308,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_402: 402,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_405: 405,
    NUMBER_406: 406,
    NUMBER_407: 407,
    NUMBER_408: 408,
    NUMBER_409: 409,
    NUMBER_410: 410,
    NUMBER_411: 411,
    NUMBER_412: 412,
    NUMBER_413: 413,
    NUMBER_414: 414,
    NUMBER_415: 415,
    NUMBER_416: 416,
    NUMBER_417: 417,
    NUMBER_421: 421,
    NUMBER_422: 422,
    NUMBER_423: 423,
    NUMBER_424: 424,
    NUMBER_426: 426,
    NUMBER_428: 428,
    NUMBER_429: 429,
    NUMBER_431: 431,
    NUMBER_451: 451,
    NUMBER_500: 500,
    NUMBER_501: 501,
    NUMBER_502: 502,
    NUMBER_503: 503,
    NUMBER_504: 504,
    NUMBER_505: 505,
    NUMBER_506: 506,
    NUMBER_507: 507,
    NUMBER_508: 508,
    NUMBER_510: 510,
    NUMBER_511: 511
} as const;

export type HttpStatusCode = typeof HttpStatusCode[keyof typeof HttpStatusCode];


/**
 * 
 * @export
 * @interface JobTitleDto
 */
export interface JobTitleDto {
    /**
     * 
     * @type {string}
     * @memberof JobTitleDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobTitleDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobTitleDto
     */
    'nameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface JobTitleDtoListResponse
 */
export interface JobTitleDtoListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof JobTitleDtoListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof JobTitleDtoListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobTitleDtoListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobTitleDtoListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof JobTitleDtoListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {Array<JobTitleDto>}
     * @memberof JobTitleDtoListResponse
     */
    'data'?: Array<JobTitleDto> | null;
}


/**
 * 
 * @export
 * @interface JobTitleDtoPagedList
 */
export interface JobTitleDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof JobTitleDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobTitleDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobTitleDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobTitleDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof JobTitleDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobTitleDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<JobTitleDto>}
     * @memberof JobTitleDtoPagedList
     */
    'items'?: Array<JobTitleDto> | null;
}
/**
 * 
 * @export
 * @interface JobTitleDtoPagedListResponse
 */
export interface JobTitleDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof JobTitleDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof JobTitleDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobTitleDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobTitleDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof JobTitleDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {JobTitleDtoPagedList}
     * @memberof JobTitleDtoPagedListResponse
     */
    'data'?: JobTitleDtoPagedList;
}


/**
 * 
 * @export
 * @interface JobTitleDtoResponse
 */
export interface JobTitleDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof JobTitleDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof JobTitleDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobTitleDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobTitleDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof JobTitleDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {JobTitleDto}
     * @memberof JobTitleDtoResponse
     */
    'data'?: JobTitleDto;
}


/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface MaritalStatusDto
 */
export interface MaritalStatusDto {
    /**
     * 
     * @type {string}
     * @memberof MaritalStatusDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaritalStatusDto
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaritalStatusDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaritalStatusDto
     */
    'nameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface MaritalStatusDtoPagedList
 */
export interface MaritalStatusDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof MaritalStatusDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaritalStatusDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaritalStatusDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaritalStatusDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MaritalStatusDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MaritalStatusDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<MaritalStatusDto>}
     * @memberof MaritalStatusDtoPagedList
     */
    'items'?: Array<MaritalStatusDto> | null;
}
/**
 * 
 * @export
 * @interface MaritalStatusDtoPagedListResponse
 */
export interface MaritalStatusDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof MaritalStatusDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof MaritalStatusDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaritalStatusDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MaritalStatusDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof MaritalStatusDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {MaritalStatusDtoPagedList}
     * @memberof MaritalStatusDtoPagedListResponse
     */
    'data'?: MaritalStatusDtoPagedList;
}


/**
 * 
 * @export
 * @interface NationalityDto
 */
export interface NationalityDto {
    /**
     * 
     * @type {string}
     * @memberof NationalityDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NationalityDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NationalityDto
     */
    'nameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface NationalityDtoPagedList
 */
export interface NationalityDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof NationalityDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof NationalityDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof NationalityDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof NationalityDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof NationalityDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NationalityDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<NationalityDto>}
     * @memberof NationalityDtoPagedList
     */
    'items'?: Array<NationalityDto> | null;
}
/**
 * 
 * @export
 * @interface NationalityDtoPagedListResponse
 */
export interface NationalityDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof NationalityDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof NationalityDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NationalityDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof NationalityDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof NationalityDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {NationalityDtoPagedList}
     * @memberof NationalityDtoPagedListResponse
     */
    'data'?: NationalityDtoPagedList;
}


/**
 * 
 * @export
 * @interface NationalityDtoResponse
 */
export interface NationalityDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof NationalityDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof NationalityDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NationalityDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof NationalityDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof NationalityDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {NationalityDto}
     * @memberof NationalityDtoResponse
     */
    'data'?: NationalityDto;
}


/**
 * 
 * @export
 * @interface PersonalInfoDto
 */
export interface PersonalInfoDto {
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'fullNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'fullNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'nationalityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'idNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'passportNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'passportExpiry'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'gender'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'maritalStatusId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'cityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'mobile'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'summaryAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'summaryEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'preferencesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDto
     */
    'preferencesEn'?: string | null;
    /**
     * 
     * @type {Array<EducationBriefDto>}
     * @memberof PersonalInfoDto
     */
    'educations'?: Array<EducationBriefDto> | null;
    /**
     * 
     * @type {Array<SkillsBriefDto>}
     * @memberof PersonalInfoDto
     */
    'skills'?: Array<SkillsBriefDto> | null;
    /**
     * 
     * @type {Array<ExperienceBriefDto>}
     * @memberof PersonalInfoDto
     */
    'experiences'?: Array<ExperienceBriefDto> | null;
}
/**
 * 
 * @export
 * @interface PersonalInfoDtoPagedList
 */
export interface PersonalInfoDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof PersonalInfoDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalInfoDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalInfoDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonalInfoDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalInfoDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalInfoDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<PersonalInfoDto>}
     * @memberof PersonalInfoDtoPagedList
     */
    'items'?: Array<PersonalInfoDto> | null;
}
/**
 * 
 * @export
 * @interface PersonalInfoDtoPagedListResponse
 */
export interface PersonalInfoDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof PersonalInfoDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalInfoDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersonalInfoDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof PersonalInfoDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {PersonalInfoDtoPagedList}
     * @memberof PersonalInfoDtoPagedListResponse
     */
    'data'?: PersonalInfoDtoPagedList;
}


/**
 * 
 * @export
 * @interface PersonalInfoDtoResponse
 */
export interface PersonalInfoDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof PersonalInfoDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof PersonalInfoDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PersonalInfoDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersonalInfoDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof PersonalInfoDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {PersonalInfoDto}
     * @memberof PersonalInfoDtoResponse
     */
    'data'?: PersonalInfoDto;
}


/**
 * 
 * @export
 * @interface SkillsBriefDto
 */
export interface SkillsBriefDto {
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDto
     */
    'skillNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDto
     */
    'skillNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDto
     */
    'proficiencyLevelAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDto
     */
    'proficiencyLevelEn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SkillsBriefDto
     */
    'yearsOfExperience'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface SkillsBriefDtoPagedList
 */
export interface SkillsBriefDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof SkillsBriefDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SkillsBriefDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof SkillsBriefDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SkillsBriefDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SkillsBriefDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SkillsBriefDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<SkillsBriefDto>}
     * @memberof SkillsBriefDtoPagedList
     */
    'items'?: Array<SkillsBriefDto> | null;
}
/**
 * 
 * @export
 * @interface SkillsBriefDtoPagedListResponse
 */
export interface SkillsBriefDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SkillsBriefDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SkillsBriefDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SkillsBriefDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SkillsBriefDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {SkillsBriefDtoPagedList}
     * @memberof SkillsBriefDtoPagedListResponse
     */
    'data'?: SkillsBriefDtoPagedList;
}


/**
 * 
 * @export
 * @interface SkillsBriefDtoResponse
 */
export interface SkillsBriefDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SkillsBriefDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SkillsBriefDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SkillsBriefDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SkillsBriefDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SkillsBriefDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {SkillsBriefDto}
     * @memberof SkillsBriefDtoResponse
     */
    'data'?: SkillsBriefDto;
}


/**
 * 
 * @export
 * @interface SpecializationDto
 */
export interface SpecializationDto {
    /**
     * 
     * @type {string}
     * @memberof SpecializationDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDto
     */
    'nameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDto
     */
    'jobTitleNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDto
     */
    'jobTitleNameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface SpecializationDtoListResponse
 */
export interface SpecializationDtoListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SpecializationDtoListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SpecializationDtoListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDtoListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SpecializationDtoListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SpecializationDtoListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {Array<SpecializationDto>}
     * @memberof SpecializationDtoListResponse
     */
    'data'?: Array<SpecializationDto> | null;
}


/**
 * 
 * @export
 * @interface SpecializationDtoPagedList
 */
export interface SpecializationDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof SpecializationDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpecializationDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpecializationDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpecializationDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SpecializationDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SpecializationDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<SpecializationDto>}
     * @memberof SpecializationDtoPagedList
     */
    'items'?: Array<SpecializationDto> | null;
}
/**
 * 
 * @export
 * @interface SpecializationDtoPagedListResponse
 */
export interface SpecializationDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SpecializationDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SpecializationDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SpecializationDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SpecializationDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {SpecializationDtoPagedList}
     * @memberof SpecializationDtoPagedListResponse
     */
    'data'?: SpecializationDtoPagedList;
}


/**
 * 
 * @export
 * @interface SpecializationDtoResponse
 */
export interface SpecializationDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SpecializationDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SpecializationDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SpecializationDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SpecializationDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SpecializationDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {SpecializationDto}
     * @memberof SpecializationDtoResponse
     */
    'data'?: SpecializationDto;
}


/**
 * 
 * @export
 * @interface SubSpecializationDto
 */
export interface SubSpecializationDto {
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDto
     */
    'nameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDto
     */
    'nameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDto
     */
    'specializationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDto
     */
    'specializationNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDto
     */
    'specializationNameEn'?: string | null;
}
/**
 * 
 * @export
 * @interface SubSpecializationDtoPagedList
 */
export interface SubSpecializationDtoPagedList {
    /**
     * 
     * @type {number}
     * @memberof SubSpecializationDtoPagedList
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubSpecializationDtoPagedList
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubSpecializationDtoPagedList
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubSpecializationDtoPagedList
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubSpecializationDtoPagedList
     */
    'hasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SubSpecializationDtoPagedList
     */
    'hasNext'?: boolean;
    /**
     * 
     * @type {Array<SubSpecializationDto>}
     * @memberof SubSpecializationDtoPagedList
     */
    'items'?: Array<SubSpecializationDto> | null;
}
/**
 * 
 * @export
 * @interface SubSpecializationDtoPagedListResponse
 */
export interface SubSpecializationDtoPagedListResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SubSpecializationDtoPagedListResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SubSpecializationDtoPagedListResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDtoPagedListResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SubSpecializationDtoPagedListResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SubSpecializationDtoPagedListResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {SubSpecializationDtoPagedList}
     * @memberof SubSpecializationDtoPagedListResponse
     */
    'data'?: SubSpecializationDtoPagedList;
}


/**
 * 
 * @export
 * @interface SubSpecializationDtoResponse
 */
export interface SubSpecializationDtoResponse {
    /**
     * 
     * @type {HttpStatusCode}
     * @memberof SubSpecializationDtoResponse
     */
    'httpStatusCode'?: HttpStatusCode;
    /**
     * 
     * @type {boolean}
     * @memberof SubSpecializationDtoResponse
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubSpecializationDtoResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SubSpecializationDtoResponse
     */
    'errors'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Array<string> | null; }}
     * @memberof SubSpecializationDtoResponse
     */
    'modelErrors'?: { [key: string]: Array<string> | null; } | null;
    /**
     * 
     * @type {SubSpecializationDto}
     * @memberof SubSpecializationDtoResponse
     */
    'data'?: SubSpecializationDto;
}


/**
 * 
 * @export
 * @interface UpdateCertsBriefDto
 */
export interface UpdateCertsBriefDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'certificationNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'certificationNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'issuingOrganizationAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'issuingOrganizationEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'dateIssued'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'expiryDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertsBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateCityDto
 */
export interface UpdateCityDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCityDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCityDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCityDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCityDto
     */
    'countryId': string;
}
/**
 * 
 * @export
 * @interface UpdateCountryDto
 */
export interface UpdateCountryDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryDto
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface UpdateEducationBriefDto
 */
export interface UpdateEducationBriefDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'institutionAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'institutionEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'degreeAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'degreeEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'notesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'notesEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEducationBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateExperienceBriefDto
 */
export interface UpdateExperienceBriefDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'companyAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'companyEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'responsibilitiesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'responsibilitiesEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateExperienceBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateJobTitleDto
 */
export interface UpdateJobTitleDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateJobTitleDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateJobTitleDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateJobTitleDto
     */
    'nameEn': string;
}
/**
 * 
 * @export
 * @interface UpdateNationalityDto
 */
export interface UpdateNationalityDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateNationalityDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNationalityDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateNationalityDto
     */
    'nameEn': string;
}
/**
 * 
 * @export
 * @interface UpdatePersonalInfoDto
 */
export interface UpdatePersonalInfoDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'fullNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'fullNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'nationalityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'idNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'passportNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'passportExpiry'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'gender'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'maritalStatusId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'cityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'mobile'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'jobTitleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'summaryAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'summaryEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'preferencesAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonalInfoDto
     */
    'preferencesEn'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateSkillsBriefDto
 */
export interface UpdateSkillsBriefDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillsBriefDto
     */
    'skillNameAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillsBriefDto
     */
    'skillNameEn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillsBriefDto
     */
    'proficiencyLevelAr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillsBriefDto
     */
    'proficiencyLevelEn'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateSkillsBriefDto
     */
    'yearsOfExperience'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSkillsBriefDto
     */
    'personalInfoId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateSpecializationDto
 */
export interface UpdateSpecializationDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecializationDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecializationDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecializationDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecializationDto
     */
    'jobTitleId': string;
}
/**
 * 
 * @export
 * @interface UpdateSubSpecializationDto
 */
export interface UpdateSubSpecializationDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateSubSpecializationDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSubSpecializationDto
     */
    'nameAr': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSubSpecializationDto
     */
    'nameEn': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSubSpecializationDto
     */
    'specializationId': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginModel?: LoginModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthLoginPost(loginModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginModel} [loginModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(loginModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CertsBriefApi - axios parameter creator
 * @export
 */
export const CertsBriefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [certificationNameAr] 
         * @param {string} [certificationNameEn] 
         * @param {string} [issuingOrganizationAr] 
         * @param {string} [issuingOrganizationEn] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefGet: async (certificationNameAr?: string, certificationNameEn?: string, issuingOrganizationAr?: string, issuingOrganizationEn?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CertsBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (certificationNameAr !== undefined) {
                localVarQueryParameter['CertificationNameAr'] = certificationNameAr;
            }

            if (certificationNameEn !== undefined) {
                localVarQueryParameter['CertificationNameEn'] = certificationNameEn;
            }

            if (issuingOrganizationAr !== undefined) {
                localVarQueryParameter['IssuingOrganizationAr'] = issuingOrganizationAr;
            }

            if (issuingOrganizationEn !== undefined) {
                localVarQueryParameter['IssuingOrganizationEn'] = issuingOrganizationEn;
            }

            if (personalInfoId !== undefined) {
                localVarQueryParameter['PersonalInfoId'] = personalInfoId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCertsBriefIdDelete', 'id', id)
            const localVarPath = `/api/CertsBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCertsBriefIdGet', 'id', id)
            const localVarPath = `/api/CertsBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCertsBriefDto} [updateCertsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefIdPut: async (id: string, updateCertsBriefDto?: UpdateCertsBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCertsBriefIdPut', 'id', id)
            const localVarPath = `/api/CertsBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCertsBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCertsBriefDto} [createCertsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefPost: async (createCertsBriefDto?: CreateCertsBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CertsBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCertsBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertsBriefApi - functional programming interface
 * @export
 */
export const CertsBriefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CertsBriefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [certificationNameAr] 
         * @param {string} [certificationNameEn] 
         * @param {string} [issuingOrganizationAr] 
         * @param {string} [issuingOrganizationEn] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertsBriefGet(certificationNameAr?: string, certificationNameEn?: string, issuingOrganizationAr?: string, issuingOrganizationEn?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertsBriefDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertsBriefGet(certificationNameAr, certificationNameEn, issuingOrganizationAr, issuingOrganizationEn, personalInfoId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CertsBriefApi.apiCertsBriefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertsBriefIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertsBriefIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CertsBriefApi.apiCertsBriefIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertsBriefIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertsBriefDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertsBriefIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CertsBriefApi.apiCertsBriefIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCertsBriefDto} [updateCertsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertsBriefIdPut(id: string, updateCertsBriefDto?: UpdateCertsBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertsBriefIdPut(id, updateCertsBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CertsBriefApi.apiCertsBriefIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCertsBriefDto} [createCertsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertsBriefPost(createCertsBriefDto?: CreateCertsBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertsBriefPost(createCertsBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CertsBriefApi.apiCertsBriefPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CertsBriefApi - factory interface
 * @export
 */
export const CertsBriefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CertsBriefApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [certificationNameAr] 
         * @param {string} [certificationNameEn] 
         * @param {string} [issuingOrganizationAr] 
         * @param {string} [issuingOrganizationEn] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefGet(certificationNameAr?: string, certificationNameEn?: string, issuingOrganizationAr?: string, issuingOrganizationEn?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CertsBriefDtoPagedListResponse> {
            return localVarFp.apiCertsBriefGet(certificationNameAr, certificationNameEn, issuingOrganizationAr, issuingOrganizationEn, personalInfoId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiCertsBriefIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CertsBriefDtoResponse> {
            return localVarFp.apiCertsBriefIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCertsBriefDto} [updateCertsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefIdPut(id: string, updateCertsBriefDto?: UpdateCertsBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiCertsBriefIdPut(id, updateCertsBriefDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCertsBriefDto} [createCertsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertsBriefPost(createCertsBriefDto?: CreateCertsBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiCertsBriefPost(createCertsBriefDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CertsBriefApi - object-oriented interface
 * @export
 * @class CertsBriefApi
 * @extends {BaseAPI}
 */
export class CertsBriefApi extends BaseAPI {
    /**
     * 
     * @param {string} [certificationNameAr] 
     * @param {string} [certificationNameEn] 
     * @param {string} [issuingOrganizationAr] 
     * @param {string} [issuingOrganizationEn] 
     * @param {string} [personalInfoId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertsBriefApi
     */
    public apiCertsBriefGet(certificationNameAr?: string, certificationNameEn?: string, issuingOrganizationAr?: string, issuingOrganizationEn?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CertsBriefApiFp(this.configuration).apiCertsBriefGet(certificationNameAr, certificationNameEn, issuingOrganizationAr, issuingOrganizationEn, personalInfoId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertsBriefApi
     */
    public apiCertsBriefIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CertsBriefApiFp(this.configuration).apiCertsBriefIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertsBriefApi
     */
    public apiCertsBriefIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CertsBriefApiFp(this.configuration).apiCertsBriefIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCertsBriefDto} [updateCertsBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertsBriefApi
     */
    public apiCertsBriefIdPut(id: string, updateCertsBriefDto?: UpdateCertsBriefDto, options?: RawAxiosRequestConfig) {
        return CertsBriefApiFp(this.configuration).apiCertsBriefIdPut(id, updateCertsBriefDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCertsBriefDto} [createCertsBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertsBriefApi
     */
    public apiCertsBriefPost(createCertsBriefDto?: CreateCertsBriefDto, options?: RawAxiosRequestConfig) {
        return CertsBriefApiFp(this.configuration).apiCertsBriefPost(createCertsBriefDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CitiesApi - axios parameter creator
 * @export
 */
export const CitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesGet: async (searchTerm?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCitiesIdDelete', 'id', id)
            const localVarPath = `/api/Cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCitiesIdGet', 'id', id)
            const localVarPath = `/api/Cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCityDto} [updateCityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesIdPut: async (id: string, updateCityDto?: UpdateCityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCitiesIdPut', 'id', id)
            const localVarPath = `/api/Cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCityDto} [createCityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesPost: async (createCityDto?: CreateCityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CitiesApi - functional programming interface
 * @export
 */
export const CitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCitiesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CityDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCitiesGet(searchTerm, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.apiCitiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCitiesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCitiesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.apiCitiesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCitiesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CityDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCitiesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.apiCitiesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCityDto} [updateCityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCitiesIdPut(id: string, updateCityDto?: UpdateCityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCitiesIdPut(id, updateCityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.apiCitiesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCityDto} [createCityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCitiesPost(createCityDto?: CreateCityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCitiesPost(createCityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.apiCitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CitiesApi - factory interface
 * @export
 */
export const CitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CityDtoPagedListResponse> {
            return localVarFp.apiCitiesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiCitiesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CityDtoResponse> {
            return localVarFp.apiCitiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCityDto} [updateCityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesIdPut(id: string, updateCityDto?: UpdateCityDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiCitiesIdPut(id, updateCityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCityDto} [createCityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCitiesPost(createCityDto?: CreateCityDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiCitiesPost(createCityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CitiesApi - object-oriented interface
 * @export
 * @class CitiesApi
 * @extends {BaseAPI}
 */
export class CitiesApi extends BaseAPI {
    /**
     * 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public apiCitiesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).apiCitiesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public apiCitiesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).apiCitiesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public apiCitiesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).apiCitiesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCityDto} [updateCityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public apiCitiesIdPut(id: string, updateCityDto?: UpdateCityDto, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).apiCitiesIdPut(id, updateCityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCityDto} [createCityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CitiesApi
     */
    public apiCitiesPost(createCityDto?: CreateCityDto, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).apiCitiesPost(createCityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Countries/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesGet: async (searchTerm?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCountriesIdDelete', 'id', id)
            const localVarPath = `/api/Countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCountriesIdGet', 'id', id)
            const localVarPath = `/api/Countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCountryDto} [updateCountryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesIdPut: async (id: string, updateCountryDto?: UpdateCountryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCountriesIdPut', 'id', id)
            const localVarPath = `/api/Countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCountryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCountryDto} [createCountryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesPost: async (createCountryDto?: CreateCountryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCountryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryDtoListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.apiCountriesAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesGet(searchTerm, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.apiCountriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.apiCountriesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.apiCountriesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCountryDto} [updateCountryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesIdPut(id: string, updateCountryDto?: UpdateCountryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesIdPut(id, updateCountryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.apiCountriesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCountryDto} [createCountryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesPost(createCountryDto?: CreateCountryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesPost(createCountryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.apiCountriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesAllGet(options?: RawAxiosRequestConfig): AxiosPromise<CountryDtoListResponse> {
            return localVarFp.apiCountriesAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<CountryDtoPagedListResponse> {
            return localVarFp.apiCountriesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiCountriesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CountryDtoResponse> {
            return localVarFp.apiCountriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCountryDto} [updateCountryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesIdPut(id: string, updateCountryDto?: UpdateCountryDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiCountriesIdPut(id, updateCountryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCountryDto} [createCountryDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesPost(createCountryDto?: CreateCountryDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiCountriesPost(createCountryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiCountriesAllGet(options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).apiCountriesAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiCountriesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).apiCountriesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiCountriesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).apiCountriesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiCountriesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).apiCountriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCountryDto} [updateCountryDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiCountriesIdPut(id: string, updateCountryDto?: UpdateCountryDto, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).apiCountriesIdPut(id, updateCountryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCountryDto} [createCountryDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiCountriesPost(createCountryDto?: CreateCountryDto, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).apiCountriesPost(createCountryDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EducationBriefApi - axios parameter creator
 * @export
 */
export const EducationBriefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [institutionAr] 
         * @param {string} [institutionEn] 
         * @param {string} [degreeAr] 
         * @param {string} [degreeEn] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefGet: async (institutionAr?: string, institutionEn?: string, degreeAr?: string, degreeEn?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EducationBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (institutionAr !== undefined) {
                localVarQueryParameter['InstitutionAr'] = institutionAr;
            }

            if (institutionEn !== undefined) {
                localVarQueryParameter['InstitutionEn'] = institutionEn;
            }

            if (degreeAr !== undefined) {
                localVarQueryParameter['DegreeAr'] = degreeAr;
            }

            if (degreeEn !== undefined) {
                localVarQueryParameter['DegreeEn'] = degreeEn;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (personalInfoId !== undefined) {
                localVarQueryParameter['PersonalInfoId'] = personalInfoId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEducationBriefIdDelete', 'id', id)
            const localVarPath = `/api/EducationBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEducationBriefIdGet', 'id', id)
            const localVarPath = `/api/EducationBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateEducationBriefDto} [updateEducationBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefIdPut: async (id: string, updateEducationBriefDto?: UpdateEducationBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEducationBriefIdPut', 'id', id)
            const localVarPath = `/api/EducationBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEducationBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateEducationBriefDto} [createEducationBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefPost: async (createEducationBriefDto?: CreateEducationBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EducationBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEducationBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EducationBriefApi - functional programming interface
 * @export
 */
export const EducationBriefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EducationBriefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [institutionAr] 
         * @param {string} [institutionEn] 
         * @param {string} [degreeAr] 
         * @param {string} [degreeEn] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEducationBriefGet(institutionAr?: string, institutionEn?: string, degreeAr?: string, degreeEn?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationBriefDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEducationBriefGet(institutionAr, institutionEn, degreeAr, degreeEn, startDate, endDate, personalInfoId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationBriefApi.apiEducationBriefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEducationBriefIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEducationBriefIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationBriefApi.apiEducationBriefIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEducationBriefIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationBriefDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEducationBriefIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationBriefApi.apiEducationBriefIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateEducationBriefDto} [updateEducationBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEducationBriefIdPut(id: string, updateEducationBriefDto?: UpdateEducationBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEducationBriefIdPut(id, updateEducationBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationBriefApi.apiEducationBriefIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateEducationBriefDto} [createEducationBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEducationBriefPost(createEducationBriefDto?: CreateEducationBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEducationBriefPost(createEducationBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EducationBriefApi.apiEducationBriefPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EducationBriefApi - factory interface
 * @export
 */
export const EducationBriefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EducationBriefApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [institutionAr] 
         * @param {string} [institutionEn] 
         * @param {string} [degreeAr] 
         * @param {string} [degreeEn] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefGet(institutionAr?: string, institutionEn?: string, degreeAr?: string, degreeEn?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<EducationBriefDtoPagedListResponse> {
            return localVarFp.apiEducationBriefGet(institutionAr, institutionEn, degreeAr, degreeEn, startDate, endDate, personalInfoId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiEducationBriefIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<EducationBriefDtoResponse> {
            return localVarFp.apiEducationBriefIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateEducationBriefDto} [updateEducationBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefIdPut(id: string, updateEducationBriefDto?: UpdateEducationBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiEducationBriefIdPut(id, updateEducationBriefDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateEducationBriefDto} [createEducationBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEducationBriefPost(createEducationBriefDto?: CreateEducationBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiEducationBriefPost(createEducationBriefDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EducationBriefApi - object-oriented interface
 * @export
 * @class EducationBriefApi
 * @extends {BaseAPI}
 */
export class EducationBriefApi extends BaseAPI {
    /**
     * 
     * @param {string} [institutionAr] 
     * @param {string} [institutionEn] 
     * @param {string} [degreeAr] 
     * @param {string} [degreeEn] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {string} [personalInfoId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationBriefApi
     */
    public apiEducationBriefGet(institutionAr?: string, institutionEn?: string, degreeAr?: string, degreeEn?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return EducationBriefApiFp(this.configuration).apiEducationBriefGet(institutionAr, institutionEn, degreeAr, degreeEn, startDate, endDate, personalInfoId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationBriefApi
     */
    public apiEducationBriefIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return EducationBriefApiFp(this.configuration).apiEducationBriefIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationBriefApi
     */
    public apiEducationBriefIdGet(id: string, options?: RawAxiosRequestConfig) {
        return EducationBriefApiFp(this.configuration).apiEducationBriefIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateEducationBriefDto} [updateEducationBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationBriefApi
     */
    public apiEducationBriefIdPut(id: string, updateEducationBriefDto?: UpdateEducationBriefDto, options?: RawAxiosRequestConfig) {
        return EducationBriefApiFp(this.configuration).apiEducationBriefIdPut(id, updateEducationBriefDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateEducationBriefDto} [createEducationBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EducationBriefApi
     */
    public apiEducationBriefPost(createEducationBriefDto?: CreateEducationBriefDto, options?: RawAxiosRequestConfig) {
        return EducationBriefApiFp(this.configuration).apiEducationBriefPost(createEducationBriefDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExperienceBriefApi - axios parameter creator
 * @export
 */
export const ExperienceBriefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [companyAr] 
         * @param {string} [companyEn] 
         * @param {string} [jobTitleId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefGet: async (companyAr?: string, companyEn?: string, jobTitleId?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ExperienceBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (companyAr !== undefined) {
                localVarQueryParameter['CompanyAr'] = companyAr;
            }

            if (companyEn !== undefined) {
                localVarQueryParameter['CompanyEn'] = companyEn;
            }

            if (jobTitleId !== undefined) {
                localVarQueryParameter['JobTitleId'] = jobTitleId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (personalInfoId !== undefined) {
                localVarQueryParameter['PersonalInfoId'] = personalInfoId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiExperienceBriefIdDelete', 'id', id)
            const localVarPath = `/api/ExperienceBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiExperienceBriefIdGet', 'id', id)
            const localVarPath = `/api/ExperienceBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceBriefDto} [updateExperienceBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefIdPut: async (id: string, updateExperienceBriefDto?: UpdateExperienceBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiExperienceBriefIdPut', 'id', id)
            const localVarPath = `/api/ExperienceBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExperienceBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateExperienceBriefDto} [createExperienceBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefPost: async (createExperienceBriefDto?: CreateExperienceBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ExperienceBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExperienceBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperienceBriefApi - functional programming interface
 * @export
 */
export const ExperienceBriefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperienceBriefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [companyAr] 
         * @param {string} [companyEn] 
         * @param {string} [jobTitleId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperienceBriefGet(companyAr?: string, companyEn?: string, jobTitleId?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceBriefDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExperienceBriefGet(companyAr, companyEn, jobTitleId, startDate, endDate, personalInfoId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceBriefApi.apiExperienceBriefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperienceBriefIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExperienceBriefIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceBriefApi.apiExperienceBriefIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperienceBriefIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExperienceBriefDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExperienceBriefIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceBriefApi.apiExperienceBriefIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceBriefDto} [updateExperienceBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperienceBriefIdPut(id: string, updateExperienceBriefDto?: UpdateExperienceBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExperienceBriefIdPut(id, updateExperienceBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceBriefApi.apiExperienceBriefIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateExperienceBriefDto} [createExperienceBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExperienceBriefPost(createExperienceBriefDto?: CreateExperienceBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExperienceBriefPost(createExperienceBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperienceBriefApi.apiExperienceBriefPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperienceBriefApi - factory interface
 * @export
 */
export const ExperienceBriefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperienceBriefApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [companyAr] 
         * @param {string} [companyEn] 
         * @param {string} [jobTitleId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefGet(companyAr?: string, companyEn?: string, jobTitleId?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<ExperienceBriefDtoPagedListResponse> {
            return localVarFp.apiExperienceBriefGet(companyAr, companyEn, jobTitleId, startDate, endDate, personalInfoId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiExperienceBriefIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ExperienceBriefDtoResponse> {
            return localVarFp.apiExperienceBriefIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateExperienceBriefDto} [updateExperienceBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefIdPut(id: string, updateExperienceBriefDto?: UpdateExperienceBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiExperienceBriefIdPut(id, updateExperienceBriefDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateExperienceBriefDto} [createExperienceBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExperienceBriefPost(createExperienceBriefDto?: CreateExperienceBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiExperienceBriefPost(createExperienceBriefDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperienceBriefApi - object-oriented interface
 * @export
 * @class ExperienceBriefApi
 * @extends {BaseAPI}
 */
export class ExperienceBriefApi extends BaseAPI {
    /**
     * 
     * @param {string} [companyAr] 
     * @param {string} [companyEn] 
     * @param {string} [jobTitleId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {string} [personalInfoId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceBriefApi
     */
    public apiExperienceBriefGet(companyAr?: string, companyEn?: string, jobTitleId?: string, startDate?: string, endDate?: string, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ExperienceBriefApiFp(this.configuration).apiExperienceBriefGet(companyAr, companyEn, jobTitleId, startDate, endDate, personalInfoId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceBriefApi
     */
    public apiExperienceBriefIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ExperienceBriefApiFp(this.configuration).apiExperienceBriefIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceBriefApi
     */
    public apiExperienceBriefIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ExperienceBriefApiFp(this.configuration).apiExperienceBriefIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateExperienceBriefDto} [updateExperienceBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceBriefApi
     */
    public apiExperienceBriefIdPut(id: string, updateExperienceBriefDto?: UpdateExperienceBriefDto, options?: RawAxiosRequestConfig) {
        return ExperienceBriefApiFp(this.configuration).apiExperienceBriefIdPut(id, updateExperienceBriefDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateExperienceBriefDto} [createExperienceBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperienceBriefApi
     */
    public apiExperienceBriefPost(createExperienceBriefDto?: CreateExperienceBriefDto, options?: RawAxiosRequestConfig) {
        return ExperienceBriefApiFp(this.configuration).apiExperienceBriefPost(createExperienceBriefDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GendersApi - axios parameter creator
 * @export
 */
export const GendersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGendersGet: async (searchTerm?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Genders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GendersApi - functional programming interface
 * @export
 */
export const GendersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GendersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGendersGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenderDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGendersGet(searchTerm, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GendersApi.apiGendersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GendersApi - factory interface
 * @export
 */
export const GendersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GendersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGendersGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<GenderDtoPagedListResponse> {
            return localVarFp.apiGendersGet(searchTerm, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GendersApi - object-oriented interface
 * @export
 * @class GendersApi
 * @extends {BaseAPI}
 */
export class GendersApi extends BaseAPI {
    /**
     * 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GendersApi
     */
    public apiGendersGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return GendersApiFp(this.configuration).apiGendersGet(searchTerm, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * JobTitlesApi - axios parameter creator
 * @export
 */
export const JobTitlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/JobTitles/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesGet: async (searchTerm?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/JobTitles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobTitlesIdDelete', 'id', id)
            const localVarPath = `/api/JobTitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobTitlesIdGet', 'id', id)
            const localVarPath = `/api/JobTitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobTitleDto} [updateJobTitleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesIdPut: async (id: string, updateJobTitleDto?: UpdateJobTitleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobTitlesIdPut', 'id', id)
            const localVarPath = `/api/JobTitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateJobTitleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateJobTitleDto} [createJobTitleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesPost: async (createJobTitleDto?: CreateJobTitleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/JobTitles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobTitleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobTitlesApi - functional programming interface
 * @export
 */
export const JobTitlesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobTitlesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTitlesAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitleDtoListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTitlesAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobTitlesApi.apiJobTitlesAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTitlesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitleDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTitlesGet(searchTerm, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobTitlesApi.apiJobTitlesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTitlesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTitlesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobTitlesApi.apiJobTitlesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTitlesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitleDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTitlesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobTitlesApi.apiJobTitlesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobTitleDto} [updateJobTitleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTitlesIdPut(id: string, updateJobTitleDto?: UpdateJobTitleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTitlesIdPut(id, updateJobTitleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobTitlesApi.apiJobTitlesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateJobTitleDto} [createJobTitleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTitlesPost(createJobTitleDto?: CreateJobTitleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTitlesPost(createJobTitleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobTitlesApi.apiJobTitlesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobTitlesApi - factory interface
 * @export
 */
export const JobTitlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobTitlesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesAllGet(options?: RawAxiosRequestConfig): AxiosPromise<JobTitleDtoListResponse> {
            return localVarFp.apiJobTitlesAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<JobTitleDtoPagedListResponse> {
            return localVarFp.apiJobTitlesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiJobTitlesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<JobTitleDtoResponse> {
            return localVarFp.apiJobTitlesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateJobTitleDto} [updateJobTitleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesIdPut(id: string, updateJobTitleDto?: UpdateJobTitleDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiJobTitlesIdPut(id, updateJobTitleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateJobTitleDto} [createJobTitleDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTitlesPost(createJobTitleDto?: CreateJobTitleDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiJobTitlesPost(createJobTitleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobTitlesApi - object-oriented interface
 * @export
 * @class JobTitlesApi
 * @extends {BaseAPI}
 */
export class JobTitlesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTitlesApi
     */
    public apiJobTitlesAllGet(options?: RawAxiosRequestConfig) {
        return JobTitlesApiFp(this.configuration).apiJobTitlesAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTitlesApi
     */
    public apiJobTitlesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return JobTitlesApiFp(this.configuration).apiJobTitlesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTitlesApi
     */
    public apiJobTitlesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return JobTitlesApiFp(this.configuration).apiJobTitlesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTitlesApi
     */
    public apiJobTitlesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return JobTitlesApiFp(this.configuration).apiJobTitlesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateJobTitleDto} [updateJobTitleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTitlesApi
     */
    public apiJobTitlesIdPut(id: string, updateJobTitleDto?: UpdateJobTitleDto, options?: RawAxiosRequestConfig) {
        return JobTitlesApiFp(this.configuration).apiJobTitlesIdPut(id, updateJobTitleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateJobTitleDto} [createJobTitleDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobTitlesApi
     */
    public apiJobTitlesPost(createJobTitleDto?: CreateJobTitleDto, options?: RawAxiosRequestConfig) {
        return JobTitlesApiFp(this.configuration).apiJobTitlesPost(createJobTitleDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MaritalStatusesApi - axios parameter creator
 * @export
 */
export const MaritalStatusesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMaritalStatusesGet: async (searchTerm?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MaritalStatuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaritalStatusesApi - functional programming interface
 * @export
 */
export const MaritalStatusesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaritalStatusesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMaritalStatusesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaritalStatusDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMaritalStatusesGet(searchTerm, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MaritalStatusesApi.apiMaritalStatusesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MaritalStatusesApi - factory interface
 * @export
 */
export const MaritalStatusesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaritalStatusesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMaritalStatusesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<MaritalStatusDtoPagedListResponse> {
            return localVarFp.apiMaritalStatusesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MaritalStatusesApi - object-oriented interface
 * @export
 * @class MaritalStatusesApi
 * @extends {BaseAPI}
 */
export class MaritalStatusesApi extends BaseAPI {
    /**
     * 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaritalStatusesApi
     */
    public apiMaritalStatusesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return MaritalStatusesApiFp(this.configuration).apiMaritalStatusesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NationalitiesApi - axios parameter creator
 * @export
 */
export const NationalitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesGet: async (searchTerm?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Nationalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNationalitiesIdDelete', 'id', id)
            const localVarPath = `/api/Nationalities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNationalitiesIdGet', 'id', id)
            const localVarPath = `/api/Nationalities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateNationalityDto} [updateNationalityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesIdPut: async (id: string, updateNationalityDto?: UpdateNationalityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiNationalitiesIdPut', 'id', id)
            const localVarPath = `/api/Nationalities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNationalityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateNationalityDto} [createNationalityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesPost: async (createNationalityDto?: CreateNationalityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Nationalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNationalityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NationalitiesApi - functional programming interface
 * @export
 */
export const NationalitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NationalitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNationalitiesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NationalityDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNationalitiesGet(searchTerm, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NationalitiesApi.apiNationalitiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNationalitiesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNationalitiesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NationalitiesApi.apiNationalitiesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNationalitiesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NationalityDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNationalitiesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NationalitiesApi.apiNationalitiesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateNationalityDto} [updateNationalityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNationalitiesIdPut(id: string, updateNationalityDto?: UpdateNationalityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNationalitiesIdPut(id, updateNationalityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NationalitiesApi.apiNationalitiesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateNationalityDto} [createNationalityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiNationalitiesPost(createNationalityDto?: CreateNationalityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiNationalitiesPost(createNationalityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NationalitiesApi.apiNationalitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NationalitiesApi - factory interface
 * @export
 */
export const NationalitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NationalitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<NationalityDtoPagedListResponse> {
            return localVarFp.apiNationalitiesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiNationalitiesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<NationalityDtoResponse> {
            return localVarFp.apiNationalitiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateNationalityDto} [updateNationalityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesIdPut(id: string, updateNationalityDto?: UpdateNationalityDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiNationalitiesIdPut(id, updateNationalityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateNationalityDto} [createNationalityDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiNationalitiesPost(createNationalityDto?: CreateNationalityDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiNationalitiesPost(createNationalityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NationalitiesApi - object-oriented interface
 * @export
 * @class NationalitiesApi
 * @extends {BaseAPI}
 */
export class NationalitiesApi extends BaseAPI {
    /**
     * 
     * @param {string} [searchTerm] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NationalitiesApi
     */
    public apiNationalitiesGet(searchTerm?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return NationalitiesApiFp(this.configuration).apiNationalitiesGet(searchTerm, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NationalitiesApi
     */
    public apiNationalitiesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return NationalitiesApiFp(this.configuration).apiNationalitiesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NationalitiesApi
     */
    public apiNationalitiesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return NationalitiesApiFp(this.configuration).apiNationalitiesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateNationalityDto} [updateNationalityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NationalitiesApi
     */
    public apiNationalitiesIdPut(id: string, updateNationalityDto?: UpdateNationalityDto, options?: RawAxiosRequestConfig) {
        return NationalitiesApiFp(this.configuration).apiNationalitiesIdPut(id, updateNationalityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateNationalityDto} [createNationalityDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NationalitiesApi
     */
    public apiNationalitiesPost(createNationalityDto?: CreateNationalityDto, options?: RawAxiosRequestConfig) {
        return NationalitiesApiFp(this.configuration).apiNationalitiesPost(createNationalityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PersonalInfoApi - axios parameter creator
 * @export
 */
export const PersonalInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [fullNameAr] 
         * @param {string} [fullNameEn] 
         * @param {string} [idNumber] 
         * @param {string} [passportNumber] 
         * @param {string} [email] 
         * @param {string} [mobile] 
         * @param {string} [nationalityId] 
         * @param {string} [cityId] 
         * @param {string} [jobTitleId] 
         * @param {string} [maritalStatusId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoGet: async (fullNameAr?: string, fullNameEn?: string, idNumber?: string, passportNumber?: string, email?: string, mobile?: string, nationalityId?: string, cityId?: string, jobTitleId?: string, maritalStatusId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PersonalInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fullNameAr !== undefined) {
                localVarQueryParameter['FullNameAr'] = fullNameAr;
            }

            if (fullNameEn !== undefined) {
                localVarQueryParameter['FullNameEn'] = fullNameEn;
            }

            if (idNumber !== undefined) {
                localVarQueryParameter['IdNumber'] = idNumber;
            }

            if (passportNumber !== undefined) {
                localVarQueryParameter['PassportNumber'] = passportNumber;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (mobile !== undefined) {
                localVarQueryParameter['Mobile'] = mobile;
            }

            if (nationalityId !== undefined) {
                localVarQueryParameter['NationalityId'] = nationalityId;
            }

            if (cityId !== undefined) {
                localVarQueryParameter['CityId'] = cityId;
            }

            if (jobTitleId !== undefined) {
                localVarQueryParameter['JobTitleId'] = jobTitleId;
            }

            if (maritalStatusId !== undefined) {
                localVarQueryParameter['MaritalStatusId'] = maritalStatusId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPersonalInfoIdDelete', 'id', id)
            const localVarPath = `/api/PersonalInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPersonalInfoIdGet', 'id', id)
            const localVarPath = `/api/PersonalInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePersonalInfoDto} [updatePersonalInfoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoIdPut: async (id: string, updatePersonalInfoDto?: UpdatePersonalInfoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPersonalInfoIdPut', 'id', id)
            const localVarPath = `/api/PersonalInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePersonalInfoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePersonalInfoDto} [createPersonalInfoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoPost: async (createPersonalInfoDto?: CreatePersonalInfoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PersonalInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPersonalInfoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonalInfoApi - functional programming interface
 * @export
 */
export const PersonalInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonalInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [fullNameAr] 
         * @param {string} [fullNameEn] 
         * @param {string} [idNumber] 
         * @param {string} [passportNumber] 
         * @param {string} [email] 
         * @param {string} [mobile] 
         * @param {string} [nationalityId] 
         * @param {string} [cityId] 
         * @param {string} [jobTitleId] 
         * @param {string} [maritalStatusId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalInfoGet(fullNameAr?: string, fullNameEn?: string, idNumber?: string, passportNumber?: string, email?: string, mobile?: string, nationalityId?: string, cityId?: string, jobTitleId?: string, maritalStatusId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalInfoDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalInfoGet(fullNameAr, fullNameEn, idNumber, passportNumber, email, mobile, nationalityId, cityId, jobTitleId, maritalStatusId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalInfoApi.apiPersonalInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalInfoIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalInfoIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalInfoApi.apiPersonalInfoIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalInfoIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalInfoDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalInfoIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalInfoApi.apiPersonalInfoIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePersonalInfoDto} [updatePersonalInfoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalInfoIdPut(id: string, updatePersonalInfoDto?: UpdatePersonalInfoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalInfoIdPut(id, updatePersonalInfoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalInfoApi.apiPersonalInfoIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePersonalInfoDto} [createPersonalInfoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPersonalInfoPost(createPersonalInfoDto?: CreatePersonalInfoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPersonalInfoPost(createPersonalInfoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PersonalInfoApi.apiPersonalInfoPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PersonalInfoApi - factory interface
 * @export
 */
export const PersonalInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonalInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [fullNameAr] 
         * @param {string} [fullNameEn] 
         * @param {string} [idNumber] 
         * @param {string} [passportNumber] 
         * @param {string} [email] 
         * @param {string} [mobile] 
         * @param {string} [nationalityId] 
         * @param {string} [cityId] 
         * @param {string} [jobTitleId] 
         * @param {string} [maritalStatusId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoGet(fullNameAr?: string, fullNameEn?: string, idNumber?: string, passportNumber?: string, email?: string, mobile?: string, nationalityId?: string, cityId?: string, jobTitleId?: string, maritalStatusId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PersonalInfoDtoPagedListResponse> {
            return localVarFp.apiPersonalInfoGet(fullNameAr, fullNameEn, idNumber, passportNumber, email, mobile, nationalityId, cityId, jobTitleId, maritalStatusId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiPersonalInfoIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PersonalInfoDtoResponse> {
            return localVarFp.apiPersonalInfoIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePersonalInfoDto} [updatePersonalInfoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoIdPut(id: string, updatePersonalInfoDto?: UpdatePersonalInfoDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiPersonalInfoIdPut(id, updatePersonalInfoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePersonalInfoDto} [createPersonalInfoDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPersonalInfoPost(createPersonalInfoDto?: CreatePersonalInfoDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiPersonalInfoPost(createPersonalInfoDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonalInfoApi - object-oriented interface
 * @export
 * @class PersonalInfoApi
 * @extends {BaseAPI}
 */
export class PersonalInfoApi extends BaseAPI {
    /**
     * 
     * @param {string} [fullNameAr] 
     * @param {string} [fullNameEn] 
     * @param {string} [idNumber] 
     * @param {string} [passportNumber] 
     * @param {string} [email] 
     * @param {string} [mobile] 
     * @param {string} [nationalityId] 
     * @param {string} [cityId] 
     * @param {string} [jobTitleId] 
     * @param {string} [maritalStatusId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalInfoApi
     */
    public apiPersonalInfoGet(fullNameAr?: string, fullNameEn?: string, idNumber?: string, passportNumber?: string, email?: string, mobile?: string, nationalityId?: string, cityId?: string, jobTitleId?: string, maritalStatusId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return PersonalInfoApiFp(this.configuration).apiPersonalInfoGet(fullNameAr, fullNameEn, idNumber, passportNumber, email, mobile, nationalityId, cityId, jobTitleId, maritalStatusId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalInfoApi
     */
    public apiPersonalInfoIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return PersonalInfoApiFp(this.configuration).apiPersonalInfoIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalInfoApi
     */
    public apiPersonalInfoIdGet(id: string, options?: RawAxiosRequestConfig) {
        return PersonalInfoApiFp(this.configuration).apiPersonalInfoIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdatePersonalInfoDto} [updatePersonalInfoDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalInfoApi
     */
    public apiPersonalInfoIdPut(id: string, updatePersonalInfoDto?: UpdatePersonalInfoDto, options?: RawAxiosRequestConfig) {
        return PersonalInfoApiFp(this.configuration).apiPersonalInfoIdPut(id, updatePersonalInfoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePersonalInfoDto} [createPersonalInfoDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalInfoApi
     */
    public apiPersonalInfoPost(createPersonalInfoDto?: CreatePersonalInfoDto, options?: RawAxiosRequestConfig) {
        return PersonalInfoApiFp(this.configuration).apiPersonalInfoPost(createPersonalInfoDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SkillsBriefApi - axios parameter creator
 * @export
 */
export const SkillsBriefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [skillNameAr] 
         * @param {string} [skillNameEn] 
         * @param {string} [proficiencyLevelAr] 
         * @param {string} [proficiencyLevelEn] 
         * @param {number} [yearsOfExperience] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefGet: async (skillNameAr?: string, skillNameEn?: string, proficiencyLevelAr?: string, proficiencyLevelEn?: string, yearsOfExperience?: number, personalInfoId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkillsBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (skillNameAr !== undefined) {
                localVarQueryParameter['SkillNameAr'] = skillNameAr;
            }

            if (skillNameEn !== undefined) {
                localVarQueryParameter['SkillNameEn'] = skillNameEn;
            }

            if (proficiencyLevelAr !== undefined) {
                localVarQueryParameter['ProficiencyLevelAr'] = proficiencyLevelAr;
            }

            if (proficiencyLevelEn !== undefined) {
                localVarQueryParameter['ProficiencyLevelEn'] = proficiencyLevelEn;
            }

            if (yearsOfExperience !== undefined) {
                localVarQueryParameter['YearsOfExperience'] = yearsOfExperience;
            }

            if (personalInfoId !== undefined) {
                localVarQueryParameter['PersonalInfoId'] = personalInfoId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSkillsBriefIdDelete', 'id', id)
            const localVarPath = `/api/SkillsBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSkillsBriefIdGet', 'id', id)
            const localVarPath = `/api/SkillsBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkillsBriefDto} [updateSkillsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefIdPut: async (id: string, updateSkillsBriefDto?: UpdateSkillsBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSkillsBriefIdPut', 'id', id)
            const localVarPath = `/api/SkillsBrief/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSkillsBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSkillsBriefDto} [createSkillsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefPost: async (createSkillsBriefDto?: CreateSkillsBriefDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SkillsBrief`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSkillsBriefDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillsBriefApi - functional programming interface
 * @export
 */
export const SkillsBriefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillsBriefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [skillNameAr] 
         * @param {string} [skillNameEn] 
         * @param {string} [proficiencyLevelAr] 
         * @param {string} [proficiencyLevelEn] 
         * @param {number} [yearsOfExperience] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSkillsBriefGet(skillNameAr?: string, skillNameEn?: string, proficiencyLevelAr?: string, proficiencyLevelEn?: string, yearsOfExperience?: number, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillsBriefDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSkillsBriefGet(skillNameAr, skillNameEn, proficiencyLevelAr, proficiencyLevelEn, yearsOfExperience, personalInfoId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsBriefApi.apiSkillsBriefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSkillsBriefIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSkillsBriefIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsBriefApi.apiSkillsBriefIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSkillsBriefIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillsBriefDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSkillsBriefIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsBriefApi.apiSkillsBriefIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkillsBriefDto} [updateSkillsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSkillsBriefIdPut(id: string, updateSkillsBriefDto?: UpdateSkillsBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSkillsBriefIdPut(id, updateSkillsBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsBriefApi.apiSkillsBriefIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateSkillsBriefDto} [createSkillsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSkillsBriefPost(createSkillsBriefDto?: CreateSkillsBriefDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSkillsBriefPost(createSkillsBriefDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SkillsBriefApi.apiSkillsBriefPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SkillsBriefApi - factory interface
 * @export
 */
export const SkillsBriefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillsBriefApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [skillNameAr] 
         * @param {string} [skillNameEn] 
         * @param {string} [proficiencyLevelAr] 
         * @param {string} [proficiencyLevelEn] 
         * @param {number} [yearsOfExperience] 
         * @param {string} [personalInfoId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefGet(skillNameAr?: string, skillNameEn?: string, proficiencyLevelAr?: string, proficiencyLevelEn?: string, yearsOfExperience?: number, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SkillsBriefDtoPagedListResponse> {
            return localVarFp.apiSkillsBriefGet(skillNameAr, skillNameEn, proficiencyLevelAr, proficiencyLevelEn, yearsOfExperience, personalInfoId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiSkillsBriefIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SkillsBriefDtoResponse> {
            return localVarFp.apiSkillsBriefIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSkillsBriefDto} [updateSkillsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefIdPut(id: string, updateSkillsBriefDto?: UpdateSkillsBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiSkillsBriefIdPut(id, updateSkillsBriefDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSkillsBriefDto} [createSkillsBriefDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSkillsBriefPost(createSkillsBriefDto?: CreateSkillsBriefDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiSkillsBriefPost(createSkillsBriefDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SkillsBriefApi - object-oriented interface
 * @export
 * @class SkillsBriefApi
 * @extends {BaseAPI}
 */
export class SkillsBriefApi extends BaseAPI {
    /**
     * 
     * @param {string} [skillNameAr] 
     * @param {string} [skillNameEn] 
     * @param {string} [proficiencyLevelAr] 
     * @param {string} [proficiencyLevelEn] 
     * @param {number} [yearsOfExperience] 
     * @param {string} [personalInfoId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsBriefApi
     */
    public apiSkillsBriefGet(skillNameAr?: string, skillNameEn?: string, proficiencyLevelAr?: string, proficiencyLevelEn?: string, yearsOfExperience?: number, personalInfoId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SkillsBriefApiFp(this.configuration).apiSkillsBriefGet(skillNameAr, skillNameEn, proficiencyLevelAr, proficiencyLevelEn, yearsOfExperience, personalInfoId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsBriefApi
     */
    public apiSkillsBriefIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return SkillsBriefApiFp(this.configuration).apiSkillsBriefIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsBriefApi
     */
    public apiSkillsBriefIdGet(id: string, options?: RawAxiosRequestConfig) {
        return SkillsBriefApiFp(this.configuration).apiSkillsBriefIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSkillsBriefDto} [updateSkillsBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsBriefApi
     */
    public apiSkillsBriefIdPut(id: string, updateSkillsBriefDto?: UpdateSkillsBriefDto, options?: RawAxiosRequestConfig) {
        return SkillsBriefApiFp(this.configuration).apiSkillsBriefIdPut(id, updateSkillsBriefDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSkillsBriefDto} [createSkillsBriefDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsBriefApi
     */
    public apiSkillsBriefPost(createSkillsBriefDto?: CreateSkillsBriefDto, options?: RawAxiosRequestConfig) {
        return SkillsBriefApiFp(this.configuration).apiSkillsBriefPost(createSkillsBriefDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpecializationsApi - axios parameter creator
 * @export
 */
export const SpecializationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Specializations/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [jobTitleId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsGet: async (searchTerm?: string, jobTitleId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Specializations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (jobTitleId !== undefined) {
                localVarQueryParameter['JobTitleId'] = jobTitleId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSpecializationsIdDelete', 'id', id)
            const localVarPath = `/api/Specializations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSpecializationsIdGet', 'id', id)
            const localVarPath = `/api/Specializations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSpecializationDto} [updateSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsIdPut: async (id: string, updateSpecializationDto?: UpdateSpecializationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSpecializationsIdPut', 'id', id)
            const localVarPath = `/api/Specializations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSpecializationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSpecializationDto} [createSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsPost: async (createSpecializationDto?: CreateSpecializationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Specializations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpecializationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecializationsApi - functional programming interface
 * @export
 */
export const SpecializationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpecializationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecializationsAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecializationDtoListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSpecializationsAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecializationsApi.apiSpecializationsAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [jobTitleId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecializationsGet(searchTerm?: string, jobTitleId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecializationDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSpecializationsGet(searchTerm, jobTitleId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecializationsApi.apiSpecializationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecializationsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSpecializationsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecializationsApi.apiSpecializationsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecializationsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecializationDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSpecializationsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecializationsApi.apiSpecializationsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSpecializationDto} [updateSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecializationsIdPut(id: string, updateSpecializationDto?: UpdateSpecializationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSpecializationsIdPut(id, updateSpecializationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecializationsApi.apiSpecializationsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateSpecializationDto} [createSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSpecializationsPost(createSpecializationDto?: CreateSpecializationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSpecializationsPost(createSpecializationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecializationsApi.apiSpecializationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpecializationsApi - factory interface
 * @export
 */
export const SpecializationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpecializationsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsAllGet(options?: RawAxiosRequestConfig): AxiosPromise<SpecializationDtoListResponse> {
            return localVarFp.apiSpecializationsAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [jobTitleId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsGet(searchTerm?: string, jobTitleId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SpecializationDtoPagedListResponse> {
            return localVarFp.apiSpecializationsGet(searchTerm, jobTitleId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiSpecializationsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SpecializationDtoResponse> {
            return localVarFp.apiSpecializationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSpecializationDto} [updateSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsIdPut(id: string, updateSpecializationDto?: UpdateSpecializationDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiSpecializationsIdPut(id, updateSpecializationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSpecializationDto} [createSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSpecializationsPost(createSpecializationDto?: CreateSpecializationDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiSpecializationsPost(createSpecializationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpecializationsApi - object-oriented interface
 * @export
 * @class SpecializationsApi
 * @extends {BaseAPI}
 */
export class SpecializationsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationsApi
     */
    public apiSpecializationsAllGet(options?: RawAxiosRequestConfig) {
        return SpecializationsApiFp(this.configuration).apiSpecializationsAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [searchTerm] 
     * @param {string} [jobTitleId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationsApi
     */
    public apiSpecializationsGet(searchTerm?: string, jobTitleId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SpecializationsApiFp(this.configuration).apiSpecializationsGet(searchTerm, jobTitleId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationsApi
     */
    public apiSpecializationsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return SpecializationsApiFp(this.configuration).apiSpecializationsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationsApi
     */
    public apiSpecializationsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return SpecializationsApiFp(this.configuration).apiSpecializationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSpecializationDto} [updateSpecializationDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationsApi
     */
    public apiSpecializationsIdPut(id: string, updateSpecializationDto?: UpdateSpecializationDto, options?: RawAxiosRequestConfig) {
        return SpecializationsApiFp(this.configuration).apiSpecializationsIdPut(id, updateSpecializationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSpecializationDto} [createSpecializationDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationsApi
     */
    public apiSpecializationsPost(createSpecializationDto?: CreateSpecializationDto, options?: RawAxiosRequestConfig) {
        return SpecializationsApiFp(this.configuration).apiSpecializationsPost(createSpecializationDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubSpecializationsApi - axios parameter creator
 * @export
 */
export const SubSpecializationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [specializationId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsGet: async (searchTerm?: string, specializationId?: string, pageNumber?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubSpecializations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }

            if (specializationId !== undefined) {
                localVarQueryParameter['SpecializationId'] = specializationId;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubSpecializationsIdDelete', 'id', id)
            const localVarPath = `/api/SubSpecializations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubSpecializationsIdGet', 'id', id)
            const localVarPath = `/api/SubSpecializations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSubSpecializationDto} [updateSubSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsIdPut: async (id: string, updateSubSpecializationDto?: UpdateSubSpecializationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubSpecializationsIdPut', 'id', id)
            const localVarPath = `/api/SubSpecializations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSubSpecializationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSubSpecializationDto} [createSubSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsPost: async (createSubSpecializationDto?: CreateSubSpecializationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SubSpecializations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSubSpecializationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubSpecializationsApi - functional programming interface
 * @export
 */
export const SubSpecializationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubSpecializationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [specializationId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubSpecializationsGet(searchTerm?: string, specializationId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubSpecializationDtoPagedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubSpecializationsGet(searchTerm, specializationId, pageNumber, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubSpecializationsApi.apiSubSpecializationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubSpecializationsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubSpecializationsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubSpecializationsApi.apiSubSpecializationsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubSpecializationsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubSpecializationDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubSpecializationsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubSpecializationsApi.apiSubSpecializationsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSubSpecializationDto} [updateSubSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubSpecializationsIdPut(id: string, updateSubSpecializationDto?: UpdateSubSpecializationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubSpecializationsIdPut(id, updateSubSpecializationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubSpecializationsApi.apiSubSpecializationsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateSubSpecializationDto} [createSubSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubSpecializationsPost(createSubSpecializationDto?: CreateSubSpecializationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubSpecializationsPost(createSubSpecializationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubSpecializationsApi.apiSubSpecializationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubSpecializationsApi - factory interface
 * @export
 */
export const SubSpecializationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubSpecializationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {string} [specializationId] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsGet(searchTerm?: string, specializationId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SubSpecializationDtoPagedListResponse> {
            return localVarFp.apiSubSpecializationsGet(searchTerm, specializationId, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiSubSpecializationsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SubSpecializationDtoResponse> {
            return localVarFp.apiSubSpecializationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSubSpecializationDto} [updateSubSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsIdPut(id: string, updateSubSpecializationDto?: UpdateSubSpecializationDto, options?: RawAxiosRequestConfig): AxiosPromise<BooleanResponse> {
            return localVarFp.apiSubSpecializationsIdPut(id, updateSubSpecializationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSubSpecializationDto} [createSubSpecializationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubSpecializationsPost(createSubSpecializationDto?: CreateSubSpecializationDto, options?: RawAxiosRequestConfig): AxiosPromise<GuidResponse> {
            return localVarFp.apiSubSpecializationsPost(createSubSpecializationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubSpecializationsApi - object-oriented interface
 * @export
 * @class SubSpecializationsApi
 * @extends {BaseAPI}
 */
export class SubSpecializationsApi extends BaseAPI {
    /**
     * 
     * @param {string} [searchTerm] 
     * @param {string} [specializationId] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubSpecializationsApi
     */
    public apiSubSpecializationsGet(searchTerm?: string, specializationId?: string, pageNumber?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return SubSpecializationsApiFp(this.configuration).apiSubSpecializationsGet(searchTerm, specializationId, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubSpecializationsApi
     */
    public apiSubSpecializationsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return SubSpecializationsApiFp(this.configuration).apiSubSpecializationsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubSpecializationsApi
     */
    public apiSubSpecializationsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return SubSpecializationsApiFp(this.configuration).apiSubSpecializationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSubSpecializationDto} [updateSubSpecializationDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubSpecializationsApi
     */
    public apiSubSpecializationsIdPut(id: string, updateSubSpecializationDto?: UpdateSubSpecializationDto, options?: RawAxiosRequestConfig) {
        return SubSpecializationsApiFp(this.configuration).apiSubSpecializationsIdPut(id, updateSubSpecializationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSubSpecializationDto} [createSubSpecializationDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubSpecializationsApi
     */
    public apiSubSpecializationsPost(createSubSpecializationDto?: CreateSubSpecializationDto, options?: RawAxiosRequestConfig) {
        return SubSpecializationsApiFp(this.configuration).apiSubSpecializationsPost(createSubSpecializationDto, options).then((request) => request(this.axios, this.basePath));
    }
}



